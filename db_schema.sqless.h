// Generated by SQLess v0.1
// project homepage http://www.SQLess.org

#ifndef SQLess_a14c4fd1_5a61_11e4_b553_600308a27834_H
#define SQLess_a14c4fd1_5a61_11e4_b553_600308a27834_H

#include <string>
#include <vector>
        
#include <sqlite3.h>

namespace ns {
class SQLessDB_TaskList;
class SQLessTable_list;

// 数据库连接
class SQLessConn {
public:
    SQLessConn();
    ~SQLessConn();

    typedef sqlite3* Handle;

    bool connect(const std::string& path, const std::string& key = "");

    // 数据库连接是否有效
    bool isValid();

    // 事务处理
    void beginTransition();
    void endTransition();

    // 执行数据库无关的查询，如查询服务器版本
    bool execQuery(const std::string& sql_stmt, std::string* result);

    // 关闭数据库连接
    // 同时delete所有的用户数据库实例
    void close();

    Handle handle() { return handle_; }

    // 是否存在的数据库
    bool has_database_TaskList();
    SQLessDB_TaskList* database_TaskList();

private:
    SQLessDB_TaskList* database_TaskList_;

Handle handle_;
};

class SQLessDB_TaskList {
public:
    SQLessDB_TaskList(SQLessConn* conn);
    ~SQLessDB_TaskList();

    bool exists();

    // 删除数据库
    // 将同时delete所有的数据表实例
    void drop();

    // 获取所属的数据库连接
    SQLessConn* connection() { return conn_; }

    // 直接执行SQL语句
    bool execQuery(const std::string& sql_stmt);

    // 指定数据表是否存在以及获取相应表
    bool has_table_list();
    SQLessTable_list* table_list();


public:
    static const char kName[];
    static const char kDescription[];

private:
    // 创建本数据库
    bool create();

    // 切换到当前数据库
    bool use();

private:
    SQLessConn* conn_;

    SQLessTable_list* table_list_;

};

class SQLessTable_list {
public:
    SQLessTable_list(SQLessDB_TaskList* db);
    ~SQLessTable_list();

    // 当前数据表是否存在
    bool exists();

    // 删除数据表
    bool drop();

    // 获取所属的数据库
    SQLessDB_TaskList* database() { return db_; }

    // 包含的记录数
    int row_count();

    // 插入参数

    class InsertParam {
    public:
        InsertParam();
        ~InsertParam();

        InsertParam& set_task_id(const std::string&);
        InsertParam& set_task_status(int);
        InsertParam& set_task_db(const std::string&);
        InsertParam& set_task_option(const std::string&);
        InsertParam& set_task_donepages(int);
        InsertParam& set_task_timecost(const std::string&);
        InsertParam& set_task_createtime(const std::string&);
        InsertParam& set_task_report(const std::string&);
        InsertParam& set_task_remote_id(const std::string&);
        InsertParam& set_plan_starttime(int);
        InsertParam& set_plan_lasttime(int);
        InsertParam& set_plan_peroid(int);
        InsertParam& set_plan_canbeadd(int);
        InsertParam& set_hash_csv_path(const std::string&);
        InsertParam& set_hash_csv_hash(const std::string&);
        InsertParam& set_diskusage(int);
        InsertParam& set_task_file(const std::string&);

    private:
        friend class SQLessTable_list;
        std::string task_id_;
        bool has_task_id_;
        int task_status_;
        bool has_task_status_;
        std::string task_db_;
        bool has_task_db_;
        std::string task_option_;
        bool has_task_option_;
        int task_donepages_;
        bool has_task_donepages_;
        std::string task_timecost_;
        bool has_task_timecost_;
        std::string task_createtime_;
        bool has_task_createtime_;
        std::string task_report_;
        bool has_task_report_;
        std::string task_remote_id_;
        bool has_task_remote_id_;
        int plan_starttime_;
        bool has_plan_starttime_;
        int plan_lasttime_;
        bool has_plan_lasttime_;
        int plan_peroid_;
        bool has_plan_peroid_;
        int plan_canbeadd_;
        bool has_plan_canbeadd_;
        std::string hash_csv_path_;
        bool has_hash_csv_path_;
        std::string hash_csv_hash_;
        bool has_hash_csv_hash_;
        int diskusage_;
        bool has_diskusage_;
        std::string task_file_;
        bool has_task_file_;

    };
        

    // 插入操作
    bool insert(const InsertParam& param);

    // 查询参数

    class SelectParam {
      public:
          SelectParam();
          ~SelectParam();

        SelectParam& add_task_id() { task_id_ = true; }
        SelectParam& add_task_status() { task_status_ = true; }
        SelectParam& add_task_db() { task_db_ = true; }
        SelectParam& add_task_option() { task_option_ = true; }
        SelectParam& add_task_donepages() { task_donepages_ = true; }
        SelectParam& add_task_timecost() { task_timecost_ = true; }
        SelectParam& add_task_createtime() { task_createtime_ = true; }
        SelectParam& add_task_report() { task_report_ = true; }
        SelectParam& add_task_remote_id() { task_remote_id_ = true; }
        SelectParam& add_plan_starttime() { plan_starttime_ = true; }
        SelectParam& add_plan_lasttime() { plan_lasttime_ = true; }
        SelectParam& add_plan_peroid() { plan_peroid_ = true; }
        SelectParam& add_plan_canbeadd() { plan_canbeadd_ = true; }
        SelectParam& add_hash_csv_path() { hash_csv_path_ = true; }
        SelectParam& add_hash_csv_hash() { hash_csv_hash_ = true; }
        SelectParam& add_diskusage() { diskusage_ = true; }
        SelectParam& add_task_file() { task_file_ = true; }


        SelectParam& order_by_task_id(bool desc = false);
        SelectParam& order_by_task_status(bool desc = false);
        SelectParam& order_by_task_db(bool desc = false);
        SelectParam& order_by_task_option(bool desc = false);
        SelectParam& order_by_task_donepages(bool desc = false);
        SelectParam& order_by_task_timecost(bool desc = false);
        SelectParam& order_by_task_createtime(bool desc = false);
        SelectParam& order_by_task_report(bool desc = false);
        SelectParam& order_by_task_remote_id(bool desc = false);
        SelectParam& order_by_plan_starttime(bool desc = false);
        SelectParam& order_by_plan_lasttime(bool desc = false);
        SelectParam& order_by_plan_peroid(bool desc = false);
        SelectParam& order_by_plan_canbeadd(bool desc = false);
        SelectParam& order_by_hash_csv_path(bool desc = false);
        SelectParam& order_by_hash_csv_hash(bool desc = false);
        SelectParam& order_by_diskusage(bool desc = false);
        SelectParam& order_by_task_file(bool desc = false);


        void set_condition(const std::string& cond);
        void set_limit(int count);

      private:
        friend class SQLessTable_list;

        bool task_id_;
        bool task_status_;
        bool task_db_;
        bool task_option_;
        bool task_donepages_;
        bool task_timecost_;
        bool task_createtime_;
        bool task_report_;
        bool task_remote_id_;
        bool plan_starttime_;
        bool plan_lasttime_;
        bool plan_peroid_;
        bool plan_canbeadd_;
        bool hash_csv_path_;
        bool hash_csv_hash_;
        bool diskusage_;
        bool task_file_;


        std::string condition_;
        std::string order_by_;
        bool desc_;
        int limit_count_;
    };
        

    // 查询结果

  class SelectResult {
    public:
        SelectResult();
        ~SelectResult();

        std::string task_id() { return task_id_; }
        int task_status() { return task_status_; }
        std::string task_db() { return task_db_; }
        std::string task_option() { return task_option_; }
        int task_donepages() { return task_donepages_; }
        std::string task_timecost() { return task_timecost_; }
        std::string task_createtime() { return task_createtime_; }
        std::string task_report() { return task_report_; }
        std::string task_remote_id() { return task_remote_id_; }
        int plan_starttime() { return plan_starttime_; }
        int plan_lasttime() { return plan_lasttime_; }
        int plan_peroid() { return plan_peroid_; }
        int plan_canbeadd() { return plan_canbeadd_; }
        std::string hash_csv_path() { return hash_csv_path_; }
        std::string hash_csv_hash() { return hash_csv_hash_; }
        int diskusage() { return diskusage_; }
        std::string task_file() { return task_file_; }


        bool getRow();  // 获取下一条结果
    private:
        friend class SQLessTable_list;
        sqlite3_stmt* stmt_;
        SelectParam param_;

        std::string task_id_;
        int task_status_;
        std::string task_db_;
        std::string task_option_;
        int task_donepages_;
        std::string task_timecost_;
        std::string task_createtime_;
        std::string task_report_;
        std::string task_remote_id_;
        int plan_starttime_;
        int plan_lasttime_;
        int plan_peroid_;
        int plan_canbeadd_;
        std::string hash_csv_path_;
        std::string hash_csv_hash_;
        int diskusage_;
        std::string task_file_;

    };
        

    // 查询操作
    bool select(const SelectParam& param, SelectResult* result);

    // 更新参数

    class UpdateParam {
    public:
        UpdateParam();
        ~UpdateParam();

        UpdateParam& set_task_id(const std::string&);
        UpdateParam& set_task_status(int);
        UpdateParam& set_task_db(const std::string&);
        UpdateParam& set_task_option(const std::string&);
        UpdateParam& set_task_donepages(int);
        UpdateParam& set_task_timecost(const std::string&);
        UpdateParam& set_task_createtime(const std::string&);
        UpdateParam& set_task_report(const std::string&);
        UpdateParam& set_task_remote_id(const std::string&);
        UpdateParam& set_plan_starttime(int);
        UpdateParam& set_plan_lasttime(int);
        UpdateParam& set_plan_peroid(int);
        UpdateParam& set_plan_canbeadd(int);
        UpdateParam& set_hash_csv_path(const std::string&);
        UpdateParam& set_hash_csv_hash(const std::string&);
        UpdateParam& set_diskusage(int);
        UpdateParam& set_task_file(const std::string&);


        void set_condition(const std::string& cond);

    private:
        friend class SQLessTable_list;

        std::string condition_;

        std::string task_id_;
        bool has_task_id_;
        int task_status_;
        bool has_task_status_;
        std::string task_db_;
        bool has_task_db_;
        std::string task_option_;
        bool has_task_option_;
        int task_donepages_;
        bool has_task_donepages_;
        std::string task_timecost_;
        bool has_task_timecost_;
        std::string task_createtime_;
        bool has_task_createtime_;
        std::string task_report_;
        bool has_task_report_;
        std::string task_remote_id_;
        bool has_task_remote_id_;
        int plan_starttime_;
        bool has_plan_starttime_;
        int plan_lasttime_;
        bool has_plan_lasttime_;
        int plan_peroid_;
        bool has_plan_peroid_;
        int plan_canbeadd_;
        bool has_plan_canbeadd_;
        std::string hash_csv_path_;
        bool has_hash_csv_path_;
        std::string hash_csv_hash_;
        bool has_hash_csv_hash_;
        int diskusage_;
        bool has_diskusage_;
        std::string task_file_;
        bool has_task_file_;

    };
        

    // 更新操作
    bool update(const UpdateParam& param, int* affected_rows = NULL);

    // 删除操作
    bool remove(const std::string& condition, int* affected_rows = NULL);

    // 清空所有记录
    bool clear(int* affected_rows = NULL);

public:
    static const char kName[];
    static const char kDescription[];

private:
    // 创建数据表
    bool create();

private:
    // 所属数据库
    SQLessDB_TaskList* db_;
};


} // namespace ns

#endif
