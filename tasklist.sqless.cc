
// Generated by SQLess v0.1

#include "tasklist.sqless.h"

#include <sstream>

namespace {

std::string &TrimRight(std::string &s, const std::string &m) {
    size_t pe = s.length() - 1;
    while (pe < s.length() && m.find(s.at(pe)) != m.npos)
        pe--;

    if (pe >= s.length())
        return s.erase(0, s.length());

    return s.erase(pe + 1, s.length() - 1 - pe);
}

}

namespace ns {

SQLessConn::SQLessConn():
    database_TaskList_(NULL) {
}

SQLessConn::~SQLessConn() {
    if (database_TaskList_)
        delete database_TaskList_;

    close();
}

bool SQLessConn::connect(const std::string& path, const std::string& key /* = "" */) {
    if (sqlite3_open(path.c_str(), &handle_) != SQLITE_OK)
        return false;

#ifdef SQLITE_HAS_CODEC
    if (!key.empty())
        sqlite3_key(handle_, key.c_str(), key.length());
#endif

    return true;
}

bool SQLessConn::isValid() {
    return handle_ != NULL;
}

void SQLessConn::beginTransition() {
    sqlite3_exec(handle_, "BEGIN;", NULL, NULL, NULL);
}

void SQLessConn::endTransition() {
    sqlite3_exec(handle_, "COMMIT;", NULL, NULL, NULL);
}

void SQLessConn::close() {
    sqlite3_close(handle_);
}

bool SQLessConn::has_database_TaskList() {
    return true;
}

SQLessDB_TaskList *SQLessConn::database_TaskList() {
    if (!database_TaskList_)
        database_TaskList_ = new SQLessDB_TaskList(this);

    return database_TaskList_;
}

const char SQLessDB_TaskList::kName[] = "TaskList";
const char SQLessDB_TaskList::kDescription[] = "Where all history tasks are stored by WebImager";

SQLessDB_TaskList::SQLessDB_TaskList(SQLessConn* conn)
    :conn_(conn),
    table_list_(NULL) {

    if (!exists())
        create();
}

SQLessDB_TaskList::~SQLessDB_TaskList() {
    if (table_list_)
        delete table_list_;

}

bool SQLessDB_TaskList::exists() {
    return true;
}

void SQLessDB_TaskList::drop() {

}

bool SQLessDB_TaskList::execQuery(const std::string& sql_stmt) {
    use();
    return sqlite3_exec(conn_->handle(), sql_stmt.c_str(), NULL, NULL, NULL) == SQLITE_OK;
}

bool SQLessDB_TaskList::create() {
    return true;
}

bool SQLessDB_TaskList::use() {
    return true;
}

bool SQLessDB_TaskList::has_table_list() {
    std::string sql = "SELECT name FROM sqlite_master WHERE type = \"table\" AND name = \"list\";";

    sqlite3_stmt* stmt = NULL;
    if (sqlite3_prepare_v2(conn_->handle(), sql.c_str(), -1, &stmt, 0) != SQLITE_OK) {
        const char* s = sqlite3_errmsg(conn_->handle());
        return false;
    }

    bool exists = false;
    if (sqlite3_step(stmt) == SQLITE_ROW)
        exists = true;

    sqlite3_finalize(stmt);
    return exists;
}

SQLessTable_list* SQLessDB_TaskList::table_list() {
    if (!table_list_)
        table_list_ = new SQLessTable_list(this);

    return table_list_;
}

const char SQLessTable_list::kName[] = "list";
const char SQLessTable_list::kDescription[] = "a test table";

const char SQLessTable_list::kColTaskId[] = "task_id";
const char SQLessTable_list::kColTaskStatus[] = "task_status";
const char SQLessTable_list::kColTaskDb[] = "task_db";
const char SQLessTable_list::kColTaskOption[] = "task_option";
const char SQLessTable_list::kColTaskDonepages[] = "task_donepages";
const char SQLessTable_list::kColTaskTimecost[] = "task_timecost";
const char SQLessTable_list::kColTaskCreatetime[] = "task_createtime";
const char SQLessTable_list::kColTaskReport[] = "task_report";
const char SQLessTable_list::kColTaskRemoteId[] = "task_remote_id";
const char SQLessTable_list::kColPlanStarttime[] = "plan_starttime";
const char SQLessTable_list::kColPlanLasttime[] = "plan_lasttime";
const char SQLessTable_list::kColPlanPeriod[] = "plan_period";
const char SQLessTable_list::kColPlanCanbeadd[] = "plan_canbeadd";
const char SQLessTable_list::kColHashCsvPath[] = "hash_csv_path";
const char SQLessTable_list::kColHashCsvHash[] = "hash_csv_hash";
const char SQLessTable_list::kColDiskusage[] = "diskusage";
const char SQLessTable_list::kColTaskFile[] = "task_file";


SQLessTable_list::SQLessTable_list(SQLessDB_TaskList* db)
    :db_(db) {
    if (!exists())
        create();
}

SQLessTable_list::~SQLessTable_list() {
}

bool SQLessTable_list::exists() {
    return db_->has_table_list();
}

bool SQLessTable_list::create() {
    return db_->execQuery("CREATE TABLE list (task_id TEXT PRIMARY_KEY, task_status INTEGER, task_db TEXT, task_option TEXT, task_donepages INTEGER, task_timecost TEXT, task_createtime TEXT, task_report TEXT, task_remote_id TEXT, plan_starttime BIGINT, plan_lasttime BIGINT, plan_period INTEGER, plan_canbeadd INTEGER, hash_csv_path TEXT, hash_csv_hash TEXT, diskusage BIGINT, task_file TEXT);");
}

bool SQLessTable_list::drop() {
    return db_->execQuery("DROP TABLE IF EXISTS \"list\";");
}

int SQLessTable_list::row_count() {
    //TODO: 计算表行数
    return 0;
}

SQLessTable_list::InsertParam::InsertParam():
    has_task_id_(false),
    task_status_(0),
    has_task_status_(false),
    has_task_db_(false),
    has_task_option_(false),
    task_donepages_(0),
    has_task_donepages_(false),
    has_task_timecost_(false),
    has_task_createtime_(false),
    has_task_report_(false),
    has_task_remote_id_(false),
    plan_starttime_(0),
    has_plan_starttime_(false),
    plan_lasttime_(0),
    has_plan_lasttime_(false),
    plan_period_(0),
    has_plan_period_(false),
    plan_canbeadd_(0),
    has_plan_canbeadd_(false),
    has_hash_csv_path_(false),
    has_hash_csv_hash_(false),
    diskusage_(0),
    has_diskusage_(false),
    has_task_file_(false) {
}

SQLessTable_list::InsertParam::~InsertParam() {
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_id(const std::string& i) {
    task_id_ = i;
    has_task_id_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_status(int i) {
    task_status_ = i;
    has_task_status_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_db(const std::string& i) {
    task_db_ = i;
    has_task_db_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_option(const std::string& i) {
    task_option_ = i;
    has_task_option_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_donepages(int i) {
    task_donepages_ = i;
    has_task_donepages_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_timecost(const std::string& i) {
    task_timecost_ = i;
    has_task_timecost_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_createtime(const std::string& i) {
    task_createtime_ = i;
    has_task_createtime_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_report(const std::string& i) {
    task_report_ = i;
    has_task_report_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_remote_id(const std::string& i) {
    task_remote_id_ = i;
    has_task_remote_id_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_plan_starttime(int64_t i) {
    plan_starttime_ = i;
    has_plan_starttime_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_plan_lasttime(int64_t i) {
    plan_lasttime_ = i;
    has_plan_lasttime_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_plan_period(int i) {
    plan_period_ = i;
    has_plan_period_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_plan_canbeadd(int i) {
    plan_canbeadd_ = i;
    has_plan_canbeadd_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_hash_csv_path(const std::string& i) {
    hash_csv_path_ = i;
    has_hash_csv_path_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_hash_csv_hash(const std::string& i) {
    hash_csv_hash_ = i;
    has_hash_csv_hash_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_diskusage(int64_t i) {
    diskusage_ = i;
    has_diskusage_ = true;
    return *this;
}

SQLessTable_list::InsertParam& SQLessTable_list::InsertParam::set_task_file(const std::string& i) {
    task_file_ = i;
    has_task_file_ = true;
    return *this;
}

bool SQLessTable_list::insert(const InsertParam& param) {
    std::string sql = "INSERT INTO list (";
    std::string fields;
    if (param.has_task_id_)
        fields += "task_id, ";
    if (param.has_task_status_)
        fields += "task_status, ";
    if (param.has_task_db_)
        fields += "task_db, ";
    if (param.has_task_option_)
        fields += "task_option, ";
    if (param.has_task_donepages_)
        fields += "task_donepages, ";
    if (param.has_task_timecost_)
        fields += "task_timecost, ";
    if (param.has_task_createtime_)
        fields += "task_createtime, ";
    if (param.has_task_report_)
        fields += "task_report, ";
    if (param.has_task_remote_id_)
        fields += "task_remote_id, ";
    if (param.has_plan_starttime_)
        fields += "plan_starttime, ";
    if (param.has_plan_lasttime_)
        fields += "plan_lasttime, ";
    if (param.has_plan_period_)
        fields += "plan_period, ";
    if (param.has_plan_canbeadd_)
        fields += "plan_canbeadd, ";
    if (param.has_hash_csv_path_)
        fields += "hash_csv_path, ";
    if (param.has_hash_csv_hash_)
        fields += "hash_csv_hash, ";
    if (param.has_diskusage_)
        fields += "diskusage, ";
    if (param.has_task_file_)
        fields += "task_file, ";


    sql += TrimRight(fields, " ,");
    sql += ") VALUES (";

    fields.clear();
    if (param.has_task_id_)
        fields += "@task_id, ";
    if (param.has_task_status_)
        fields += "@task_status, ";
    if (param.has_task_db_)
        fields += "@task_db, ";
    if (param.has_task_option_)
        fields += "@task_option, ";
    if (param.has_task_donepages_)
        fields += "@task_donepages, ";
    if (param.has_task_timecost_)
        fields += "@task_timecost, ";
    if (param.has_task_createtime_)
        fields += "@task_createtime, ";
    if (param.has_task_report_)
        fields += "@task_report, ";
    if (param.has_task_remote_id_)
        fields += "@task_remote_id, ";
    if (param.has_plan_starttime_)
        fields += "@plan_starttime, ";
    if (param.has_plan_lasttime_)
        fields += "@plan_lasttime, ";
    if (param.has_plan_period_)
        fields += "@plan_period, ";
    if (param.has_plan_canbeadd_)
        fields += "@plan_canbeadd, ";
    if (param.has_hash_csv_path_)
        fields += "@hash_csv_path, ";
    if (param.has_hash_csv_hash_)
        fields += "@hash_csv_hash, ";
    if (param.has_diskusage_)
        fields += "@diskusage, ";
    if (param.has_task_file_)
        fields += "@task_file, ";


    sql += TrimRight(fields, " ,");
    sql += ");";

    sqlite3_stmt* stmt = NULL;
    if (sqlite3_prepare_v2(db_->connection()->handle(), sql.c_str(), -1, &stmt, 0) != SQLITE_OK)
        return false;

    if (param.has_task_id_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_id"), param.task_id_.c_str(), param.task_id_.length(), SQLITE_STATIC);
    if (param.has_task_status_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@task_status"), param.task_status_);
    if (param.has_task_db_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_db"), param.task_db_.c_str(), param.task_db_.length(), SQLITE_STATIC);
    if (param.has_task_option_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_option"), param.task_option_.c_str(), param.task_option_.length(), SQLITE_STATIC);
    if (param.has_task_donepages_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@task_donepages"), param.task_donepages_);
    if (param.has_task_timecost_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_timecost"), param.task_timecost_.c_str(), param.task_timecost_.length(), SQLITE_STATIC);
    if (param.has_task_createtime_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_createtime"), param.task_createtime_.c_str(), param.task_createtime_.length(), SQLITE_STATIC);
    if (param.has_task_report_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_report"), param.task_report_.c_str(), param.task_report_.length(), SQLITE_STATIC);
    if (param.has_task_remote_id_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_remote_id"), param.task_remote_id_.c_str(), param.task_remote_id_.length(), SQLITE_STATIC);
    if (param.has_plan_starttime_)
        sqlite3_bind_int64(stmt, sqlite3_bind_parameter_index(stmt, "@plan_starttime"), param.plan_starttime_);
    if (param.has_plan_lasttime_)
        sqlite3_bind_int64(stmt, sqlite3_bind_parameter_index(stmt, "@plan_lasttime"), param.plan_lasttime_);
    if (param.has_plan_period_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@plan_period"), param.plan_period_);
    if (param.has_plan_canbeadd_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@plan_canbeadd"), param.plan_canbeadd_);
    if (param.has_hash_csv_path_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@hash_csv_path"), param.hash_csv_path_.c_str(), param.hash_csv_path_.length(), SQLITE_STATIC);
    if (param.has_hash_csv_hash_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@hash_csv_hash"), param.hash_csv_hash_.c_str(), param.hash_csv_hash_.length(), SQLITE_STATIC);
    if (param.has_diskusage_)
        sqlite3_bind_int64(stmt, sqlite3_bind_parameter_index(stmt, "@diskusage"), param.diskusage_);
    if (param.has_task_file_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_file"), param.task_file_.c_str(), param.task_file_.length(), SQLITE_STATIC);


    bool succ = sqlite3_step(stmt) == SQLITE_DONE;

    sqlite3_finalize(stmt);

    return succ;
}

SQLessTable_list::SelectParam::SelectParam():
    task_id_(false),
    task_status_(false),
    task_db_(false),
    task_option_(false),
    task_donepages_(false),
    task_timecost_(false),
    task_createtime_(false),
    task_report_(false),
    task_remote_id_(false),
    plan_starttime_(false),
    plan_lasttime_(false),
    plan_period_(false),
    plan_canbeadd_(false),
    hash_csv_path_(false),
    hash_csv_hash_(false),
    diskusage_(false),
    task_file_(false),
    desc_(false) {
}

SQLessTable_list::SelectParam::~SelectParam() {
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::add_all() {
    task_id_ = true;
    task_status_ = true;
    task_db_ = true;
    task_option_ = true;
    task_donepages_ = true;
    task_timecost_ = true;
    task_createtime_ = true;
    task_report_ = true;
    task_remote_id_ = true;
    plan_starttime_ = true;
    plan_lasttime_ = true;
    plan_period_ = true;
    plan_canbeadd_ = true;
    hash_csv_path_ = true;
    hash_csv_hash_ = true;
    diskusage_ = true;
    task_file_ = true;

    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_id(bool desc) {
    order_by_ = "task_id";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_status(bool desc) {
    order_by_ = "task_status";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_db(bool desc) {
    order_by_ = "task_db";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_option(bool desc) {
    order_by_ = "task_option";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_donepages(bool desc) {
    order_by_ = "task_donepages";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_timecost(bool desc) {
    order_by_ = "task_timecost";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_createtime(bool desc) {
    order_by_ = "task_createtime";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_report(bool desc) {
    order_by_ = "task_report";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_remote_id(bool desc) {
    order_by_ = "task_remote_id";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_plan_starttime(bool desc) {
    order_by_ = "plan_starttime";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_plan_lasttime(bool desc) {
    order_by_ = "plan_lasttime";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_plan_period(bool desc) {
    order_by_ = "plan_period";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_plan_canbeadd(bool desc) {
    order_by_ = "plan_canbeadd";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_hash_csv_path(bool desc) {
    order_by_ = "hash_csv_path";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_hash_csv_hash(bool desc) {
    order_by_ = "hash_csv_hash";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_diskusage(bool desc) {
    order_by_ = "diskusage";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectParam& SQLessTable_list::SelectParam::order_by_task_file(bool desc) {
    order_by_ = "task_file";
    desc_ = desc;
    return *this;
}

SQLessTable_list::SelectResult::SelectResult():
    task_status_(0),
    task_donepages_(0),
    plan_starttime_(0),
    plan_lasttime_(0),
    plan_period_(0),
    plan_canbeadd_(0),
    diskusage_(0),
    stmt_(NULL) {
}

SQLessTable_list::SelectResult::~SelectResult() {
}

bool SQLessTable_list::select(const SelectParam& param, SelectResult* result) {
    std::string sql = "SELECT ";
    std::string fields;
    if (param.task_id_)
        fields += "task_id, ";
    if (param.task_status_)
        fields += "task_status, ";
    if (param.task_db_)
        fields += "task_db, ";
    if (param.task_option_)
        fields += "task_option, ";
    if (param.task_donepages_)
        fields += "task_donepages, ";
    if (param.task_timecost_)
        fields += "task_timecost, ";
    if (param.task_createtime_)
        fields += "task_createtime, ";
    if (param.task_report_)
        fields += "task_report, ";
    if (param.task_remote_id_)
        fields += "task_remote_id, ";
    if (param.plan_starttime_)
        fields += "plan_starttime, ";
    if (param.plan_lasttime_)
        fields += "plan_lasttime, ";
    if (param.plan_period_)
        fields += "plan_period, ";
    if (param.plan_canbeadd_)
        fields += "plan_canbeadd, ";
    if (param.hash_csv_path_)
        fields += "hash_csv_path, ";
    if (param.hash_csv_hash_)
        fields += "hash_csv_hash, ";
    if (param.diskusage_)
        fields += "diskusage, ";
    if (param.task_file_)
        fields += "task_file, ";


    sql += TrimRight(fields, " ,");
    sql += " FROM list";

    if (!param.condition_.empty()) {
        sql += " WHERE ";
        sql += param.condition_;
    }

    sql += ";";

    sqlite3_stmt* stmt = NULL;
    if (sqlite3_prepare_v2(db_->connection()->handle(), sql.c_str(), -1, &stmt, 0) != SQLITE_OK)
        return false;

    result->param_ = param;
    result->stmt_ = stmt;

    return true;
}

bool SQLessTable_list::SelectResult::getRow() {
    if (!stmt_)
        return false;

    if (sqlite3_step(stmt_) != SQLITE_ROW) {
        sqlite3_finalize(stmt_);
        stmt_ = NULL;
        return false;
    }

    int _columns = sqlite3_column_count(stmt_);

    bool task_id = param_.task_id_;
    bool task_status = param_.task_status_;
    bool task_db = param_.task_db_;
    bool task_option = param_.task_option_;
    bool task_donepages = param_.task_donepages_;
    bool task_timecost = param_.task_timecost_;
    bool task_createtime = param_.task_createtime_;
    bool task_report = param_.task_report_;
    bool task_remote_id = param_.task_remote_id_;
    bool plan_starttime = param_.plan_starttime_;
    bool plan_lasttime = param_.plan_lasttime_;
    bool plan_period = param_.plan_period_;
    bool plan_canbeadd = param_.plan_canbeadd_;
    bool hash_csv_path = param_.hash_csv_path_;
    bool hash_csv_hash = param_.hash_csv_hash_;
    bool diskusage = param_.diskusage_;
    bool task_file = param_.task_file_;


    for (int i = 0; i < _columns; i++) {
        if (task_id) {
            task_id_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_id = false;
        } else if (task_status) {
            task_status_ = sqlite3_column_int(stmt_, i);
            task_status = false;
        } else if (task_db) {
            task_db_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_db = false;
        } else if (task_option) {
            task_option_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_option = false;
        } else if (task_donepages) {
            task_donepages_ = sqlite3_column_int(stmt_, i);
            task_donepages = false;
        } else if (task_timecost) {
            task_timecost_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_timecost = false;
        } else if (task_createtime) {
            task_createtime_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_createtime = false;
        } else if (task_report) {
            task_report_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_report = false;
        } else if (task_remote_id) {
            task_remote_id_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_remote_id = false;
        } else if (plan_starttime) {
            plan_starttime_ = sqlite3_column_int64(stmt_, i);
            plan_starttime = false;
        } else if (plan_lasttime) {
            plan_lasttime_ = sqlite3_column_int64(stmt_, i);
            plan_lasttime = false;
        } else if (plan_period) {
            plan_period_ = sqlite3_column_int(stmt_, i);
            plan_period = false;
        } else if (plan_canbeadd) {
            plan_canbeadd_ = sqlite3_column_int(stmt_, i);
            plan_canbeadd = false;
        } else if (hash_csv_path) {
            hash_csv_path_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            hash_csv_path = false;
        } else if (hash_csv_hash) {
            hash_csv_hash_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            hash_csv_hash = false;
        } else if (diskusage) {
            diskusage_ = sqlite3_column_int64(stmt_, i);
            diskusage = false;
        } else if (task_file) {
            task_file_.assign((const char*)sqlite3_column_text(stmt_, i), sqlite3_column_bytes(stmt_, i));
            task_file = false;
        } 
    }

    return true;
}

SQLessTable_list::UpdateParam::UpdateParam():
    has_task_id_(false),
    task_status_(0),
    has_task_status_(false),
    has_task_db_(false),
    has_task_option_(false),
    task_donepages_(0),
    has_task_donepages_(false),
    has_task_timecost_(false),
    has_task_createtime_(false),
    has_task_report_(false),
    has_task_remote_id_(false),
    plan_starttime_(0),
    has_plan_starttime_(false),
    plan_lasttime_(0),
    has_plan_lasttime_(false),
    plan_period_(0),
    has_plan_period_(false),
    plan_canbeadd_(0),
    has_plan_canbeadd_(false),
    has_hash_csv_path_(false),
    has_hash_csv_hash_(false),
    diskusage_(0),
    has_diskusage_(false),
    has_task_file_(false) {
}

SQLessTable_list::UpdateParam::~UpdateParam() {
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_id(const std::string& i) {
    task_id_ = i;
    has_task_id_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_status(int i) {
    task_status_ = i;
    has_task_status_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_db(const std::string& i) {
    task_db_ = i;
    has_task_db_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_option(const std::string& i) {
    task_option_ = i;
    has_task_option_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_donepages(int i) {
    task_donepages_ = i;
    has_task_donepages_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_timecost(const std::string& i) {
    task_timecost_ = i;
    has_task_timecost_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_createtime(const std::string& i) {
    task_createtime_ = i;
    has_task_createtime_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_report(const std::string& i) {
    task_report_ = i;
    has_task_report_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_remote_id(const std::string& i) {
    task_remote_id_ = i;
    has_task_remote_id_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_plan_starttime(int64_t i) {
    plan_starttime_ = i;
    has_plan_starttime_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_plan_lasttime(int64_t i) {
    plan_lasttime_ = i;
    has_plan_lasttime_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_plan_period(int i) {
    plan_period_ = i;
    has_plan_period_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_plan_canbeadd(int i) {
    plan_canbeadd_ = i;
    has_plan_canbeadd_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_hash_csv_path(const std::string& i) {
    hash_csv_path_ = i;
    has_hash_csv_path_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_hash_csv_hash(const std::string& i) {
    hash_csv_hash_ = i;
    has_hash_csv_hash_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_diskusage(int64_t i) {
    diskusage_ = i;
    has_diskusage_ = true;
    return *this;
}

SQLessTable_list::UpdateParam& SQLessTable_list::UpdateParam::set_task_file(const std::string& i) {
    task_file_ = i;
    has_task_file_ = true;
    return *this;
}

bool SQLessTable_list::update(const UpdateParam& param, int* affected_rows /* = NULL */) {
    std::string sql = "UPDATE list SET ";
    if (param.has_task_id_)
        sql += "task_id=@task_id, ";
    if (param.has_task_status_)
        sql += "task_status=@task_status, ";
    if (param.has_task_db_)
        sql += "task_db=@task_db, ";
    if (param.has_task_option_)
        sql += "task_option=@task_option, ";
    if (param.has_task_donepages_)
        sql += "task_donepages=@task_donepages, ";
    if (param.has_task_timecost_)
        sql += "task_timecost=@task_timecost, ";
    if (param.has_task_createtime_)
        sql += "task_createtime=@task_createtime, ";
    if (param.has_task_report_)
        sql += "task_report=@task_report, ";
    if (param.has_task_remote_id_)
        sql += "task_remote_id=@task_remote_id, ";
    if (param.has_plan_starttime_)
        sql += "plan_starttime=@plan_starttime, ";
    if (param.has_plan_lasttime_)
        sql += "plan_lasttime=@plan_lasttime, ";
    if (param.has_plan_period_)
        sql += "plan_period=@plan_period, ";
    if (param.has_plan_canbeadd_)
        sql += "plan_canbeadd=@plan_canbeadd, ";
    if (param.has_hash_csv_path_)
        sql += "hash_csv_path=@hash_csv_path, ";
    if (param.has_hash_csv_hash_)
        sql += "hash_csv_hash=@hash_csv_hash, ";
    if (param.has_diskusage_)
        sql += "diskusage=@diskusage, ";
    if (param.has_task_file_)
        sql += "task_file=@task_file, ";


    TrimRight(sql, ", ");

    if (!param.condition_.empty())
        sql.append(" WHERE ").append(param.condition_);

    sql.append(";");

    sqlite3_stmt* stmt = NULL;
    if (sqlite3_prepare_v2(db_->connection()->handle(), sql.c_str(), -1, &stmt, 0) != SQLITE_OK)
        return false;

    if (param.has_task_id_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_id"), param.task_id_.c_str(), param.task_id_.length(), SQLITE_STATIC);
    if (param.has_task_status_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@task_status"), param.task_status_);
    if (param.has_task_db_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_db"), param.task_db_.c_str(), param.task_db_.length(), SQLITE_STATIC);
    if (param.has_task_option_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_option"), param.task_option_.c_str(), param.task_option_.length(), SQLITE_STATIC);
    if (param.has_task_donepages_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@task_donepages"), param.task_donepages_);
    if (param.has_task_timecost_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_timecost"), param.task_timecost_.c_str(), param.task_timecost_.length(), SQLITE_STATIC);
    if (param.has_task_createtime_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_createtime"), param.task_createtime_.c_str(), param.task_createtime_.length(), SQLITE_STATIC);
    if (param.has_task_report_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_report"), param.task_report_.c_str(), param.task_report_.length(), SQLITE_STATIC);
    if (param.has_task_remote_id_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_remote_id"), param.task_remote_id_.c_str(), param.task_remote_id_.length(), SQLITE_STATIC);
    if (param.has_plan_starttime_)
        sqlite3_bind_int64(stmt, sqlite3_bind_parameter_index(stmt, "@plan_starttime"), param.plan_starttime_);
    if (param.has_plan_lasttime_)
        sqlite3_bind_int64(stmt, sqlite3_bind_parameter_index(stmt, "@plan_lasttime"), param.plan_lasttime_);
    if (param.has_plan_period_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@plan_period"), param.plan_period_);
    if (param.has_plan_canbeadd_)
        sqlite3_bind_int(stmt, sqlite3_bind_parameter_index(stmt, "@plan_canbeadd"), param.plan_canbeadd_);
    if (param.has_hash_csv_path_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@hash_csv_path"), param.hash_csv_path_.c_str(), param.hash_csv_path_.length(), SQLITE_STATIC);
    if (param.has_hash_csv_hash_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@hash_csv_hash"), param.hash_csv_hash_.c_str(), param.hash_csv_hash_.length(), SQLITE_STATIC);
    if (param.has_diskusage_)
        sqlite3_bind_int64(stmt, sqlite3_bind_parameter_index(stmt, "@diskusage"), param.diskusage_);
    if (param.has_task_file_)
        sqlite3_bind_text(stmt, sqlite3_bind_parameter_index(stmt, "@task_file"), param.task_file_.c_str(), param.task_file_.length(), SQLITE_STATIC);


    bool succ = sqlite3_step(stmt) == SQLITE_DONE;

    sqlite3_finalize(stmt);

    if (succ && affected_rows)
        *affected_rows = sqlite3_changes(db_->connection()->handle());

    return succ;
}

bool SQLessTable_list::remove(const std::string& condition, int* affected_rows /* = NULL */) {
    std::string sql = "DELETE FROM list ";

    if (!condition.empty()) {
        sql += " WHERE ";
        sql += condition;
    }

    sql += ";";

    bool succ = db_->execQuery(sql);
    if (succ && affected_rows)
        *affected_rows = sqlite3_changes(db_->connection()->handle());

    return succ;
}

bool SQLessTable_list::clear(int* affected_rows /* = NULL */) {
    return remove("", affected_rows);
}

} // namespace ns
