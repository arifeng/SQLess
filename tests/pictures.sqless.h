// Generated by SQLess v0.4.1 at 2014-11-11 16:48:44
// project homepage http://www.SQLess.org

#ifndef SQLess_8b33fa2b_697f_11e4_a508_600308a27834_H
#define SQLess_8b33fa2b_697f_11e4_a508_600308a27834_H

#include <cstdint>
#include <string>
#include <vector>
        
#include <sqlite3.h>

namespace unittest {

class SQLessDB_db;
class SQLessTable_tb;
class SQLessColumn_tb_id;
class SQLessColumn_tb_path;
class SQLessColumn_tb_type;
class SQLessColumn_tb_size;
class SQLessColumn_tb_md5;
class SQLessColumn_tb_data;

typedef std::vector<std::vector<std::string> > SQLessResults;

// 数据库连接
class SQLessConn {
public:
    SQLessConn();
    ~SQLessConn();

    typedef sqlite3* Handle;

    // 连接到数据库
    bool connect(const std::string& path, const std::string& key = "");

    // 数据库连接是否有效
    bool isValid();

    // 数据库版本
    std::string version();

    // 返回底层数据库句柄
    Handle handle() { return handle_; }

    // 执行查询，返回全部结果集
    // 请使用LIMIT关键字限制结果行数
    bool exec(const std::string& sql_stmt, SQLessResults* result);

    // 执行查询，返回查询结果第一行的第一列的值
    bool exec(const std::string& sql_stmt, std::string* result = NULL);

    // 关闭数据库连接
    // 同时delete所有的用户数据库实例
    void close();

    // 事务处理
    void beginTransaction();
    void endTransaction();

    // 错误处理
    int lastErrorCode();
    std::string lastErrorMsg();

    // 是否存在的数据库
    bool has_database_db();
    SQLessDB_db* database_db();

private:
    SQLessDB_db* database_db_;

    Handle handle_;
};

// The database where all pictures info are stored.
class SQLessDB_db {
public:
    SQLessDB_db(SQLessConn* conn);
    ~SQLessDB_db();

    bool exists();

    // 创建本数据库
    bool create();

    // 删除数据库
    // 将同时delete所有的数据表实例
    void drop();

    // 获取所属的数据库连接
    SQLessConn* connection() { return conn_; }

    // 直接执行SQL语句
    bool exec(const std::string& sql_stmt);

    // 指定数据表是否存在以及获取相应表
    bool has_table_tb();
    SQLessTable_tb* table_tb();


public:
    static const char kName[];

private:
    // 切换到当前数据库
    bool use();

private:
    SQLessConn* conn_;

    SQLessTable_tb* table_tb_;


};

// The table where all pictures info are stored.
class SQLessTable_tb {
public:
    SQLessTable_tb(SQLessDB_db* db);
    ~SQLessTable_tb();

    // 当前数据表是否存在
    bool exists();

    // 创建数据表
    bool create();

    // 删除数据表
    bool drop();

    // 获取所属的数据库
    SQLessDB_db* database() { return db_; }

    // 查询符合条件的记录数
    // 不传参数或参数为空返回表的总行数
    // 返回-1表示出错
    int row_count(const std::string& condition = "");

    // 插入参数

    class InsertParam {
    public:
        InsertParam();
        ~InsertParam();

        InsertParam& set_id(int);
        InsertParam& set_path(const std::string&);
        InsertParam& set_type(const std::string&);
        InsertParam& set_size(int64_t);
        InsertParam& set_md5(const std::string&);
        InsertParam& set_data(const std::string&);

    private:
        friend class SQLessTable_tb;
        int id_;
        bool has_id_;
        std::string path_;
        bool has_path_;
        std::string type_;
        bool has_type_;
        int64_t size_;
        bool has_size_;
        std::string md5_;
        bool has_md5_;
        std::string data_;
        bool has_data_;

    };
        

    // 插入操作
    // 如果表中有 INTEGER PRIMARY KEY 的列，通过 inserted_row_id 可以获取到刚插入的行的该列的值
    // 如果没有此种类型的列，sqlite将使用 _ROWID_ 代替
    bool insert(const InsertParam& param, int64_t* inserted_row_id = NULL);

    // 查询参数

    class SelectParam {
      public:
          SelectParam();
          ~SelectParam();

          SelectParam&  add_all();

        SelectParam& add_id() { id_ = true; return *this; }
        SelectParam& add_path() { path_ = true; return *this; }
        SelectParam& add_type() { type_ = true; return *this; }
        SelectParam& add_size() { size_ = true; return *this; }
        SelectParam& add_md5() { md5_ = true; return *this; }
        SelectParam& add_data() { data_ = true; return *this; }


        SelectParam& order_by_id(bool desc = false);
        SelectParam& order_by_path(bool desc = false);
        SelectParam& order_by_type(bool desc = false);
        SelectParam& order_by_size(bool desc = false);
        SelectParam& order_by_md5(bool desc = false);
        SelectParam& order_by_data(bool desc = false);


        void set_condition(const std::string& cond) { condition_ = cond; }
        void set_limit(int count) { limit_ = count; }
        void set_offset(int offset) { offset_ = offset; }

      private:
        friend class SQLessTable_tb;

        bool id_;
        bool path_;
        bool type_;
        bool size_;
        bool md5_;
        bool data_;


        std::string condition_;
        std::string order_by_;
        bool desc_;
        int limit_;
        int offset_;
    };
        

    // 查询结果

  class SelectResult {
    public:
        SelectResult();
        ~SelectResult();

        int id() const { return id_; }
        const std::string& path() const { return path_; }
        const std::string& type() const { return type_; }
        int64_t size() const { return size_; }
        const std::string& md5() const { return md5_; }
        const std::string& data() const { return data_; }


        bool getRow();  // 获取下一条结果
    private:
        friend class SQLessTable_tb;
        sqlite3_stmt* stmt_;
        SelectParam param_;

        int id_;
        std::string path_;
        std::string type_;
        int64_t size_;
        std::string md5_;
        std::string data_;

    };
        

    // 查询操作
    bool select(const SelectParam& param, SelectResult* result);

    // 更新参数

    class UpdateParam {
    public:
        UpdateParam();
        ~UpdateParam();

        UpdateParam& set_id(int);
        UpdateParam& set_path(const std::string&);
        UpdateParam& set_type(const std::string&);
        UpdateParam& set_size(int64_t);
        UpdateParam& set_md5(const std::string&);
        UpdateParam& set_data(const std::string&);


        void set_condition(const std::string& cond) { condition_ = cond; }

    private:
        friend class SQLessTable_tb;

        std::string condition_;

        int id_;
        bool has_id_;
        std::string path_;
        bool has_path_;
        std::string type_;
        bool has_type_;
        int64_t size_;
        bool has_size_;
        std::string md5_;
        bool has_md5_;
        std::string data_;
        bool has_data_;

    };
        

    // 更新操作
    bool update(const UpdateParam& param, int* affected_rows = NULL);

    // 删除操作
    // 注：delete是C++的关键字不能使用
    bool remove(const std::string& condition, int* affected_rows = NULL);

    // 清空所有记录
    bool clear(int* affected_rows = NULL);

    // 获取列
    SQLessColumn_tb_id* column_id();
    SQLessColumn_tb_path* column_path();
    SQLessColumn_tb_type* column_type();
    SQLessColumn_tb_size* column_size();
    SQLessColumn_tb_md5* column_md5();
    SQLessColumn_tb_data* column_data();


public:
    static const char kName[];

private:
    // 所属数据库
    SQLessDB_db* db_;

    //列成员
    SQLessColumn_tb_id* column_id_;
    SQLessColumn_tb_path* column_path_;
    SQLessColumn_tb_type* column_type_;
    SQLessColumn_tb_size* column_size_;
    SQLessColumn_tb_md5* column_md5_;
    SQLessColumn_tb_data* column_data_;

};

// The Unique ID of the picture
class SQLessColumn_tb_id {
public:
    SQLessColumn_tb_id(SQLessTable_tb* table);
    ~SQLessColumn_tb_id();

    // 获取所属的表
    SQLessTable_tb* table() { return table_; }

    // 该列是否存在，如果存在 real_type 代表当前数据库里的列类型
    // 注：通过kType获取到的是当前json描述文件里的类型，列的类型可能发生了变化
    bool exists();

    // 创建本列
    bool create();

    // 数据库已经为主键建了索引，并且主键是唯一的
    // 对于整数类型的主键，该列的值还会自动增长
    bool is_primary_key() { return true; }

    // 该列是否建了索引
    bool is_indexed() { return true; }

    // 该列中的值是否唯一化
    bool is_unique() { return true; }

    // 是否自动增加
    bool is_auto_increment() { return true; }

    // 是否保证非空
    bool is_not_null() { return true; }

public:
    // 列名
    static const char kName[];

    // 列的类型(在schema.json文件中指定的)
    static const char kType[];

private:
    SQLessTable_tb* table_;
};

// the path of the picture
class SQLessColumn_tb_path {
public:
    SQLessColumn_tb_path(SQLessTable_tb* table);
    ~SQLessColumn_tb_path();

    // 获取所属的表
    SQLessTable_tb* table() { return table_; }

    // 该列是否存在，如果存在 real_type 代表当前数据库里的列类型
    // 注：通过kType获取到的是当前json描述文件里的类型，列的类型可能发生了变化
    bool exists();

    // 创建本列
    bool create();

    // 数据库已经为主键建了索引，并且主键是唯一的
    // 对于整数类型的主键，该列的值还会自动增长
    bool is_primary_key() { return false; }

    // 该列是否建了索引
    bool is_indexed() { return false; }

    // 该列中的值是否唯一化
    bool is_unique() { return false; }

    // 是否自动增加
    bool is_auto_increment() { return false; }

    // 是否保证非空
    bool is_not_null() { return true; }

public:
    // 列名
    static const char kName[];

    // 列的类型(在schema.json文件中指定的)
    static const char kType[];

private:
    SQLessTable_tb* table_;
};

// The image type, e.g. jpg, png, gif...
class SQLessColumn_tb_type {
public:
    SQLessColumn_tb_type(SQLessTable_tb* table);
    ~SQLessColumn_tb_type();

    // 获取所属的表
    SQLessTable_tb* table() { return table_; }

    // 该列是否存在，如果存在 real_type 代表当前数据库里的列类型
    // 注：通过kType获取到的是当前json描述文件里的类型，列的类型可能发生了变化
    bool exists();

    // 创建本列
    bool create();

    // 数据库已经为主键建了索引，并且主键是唯一的
    // 对于整数类型的主键，该列的值还会自动增长
    bool is_primary_key() { return false; }

    // 该列是否建了索引
    bool is_indexed() { return false; }

    // 该列中的值是否唯一化
    bool is_unique() { return false; }

    // 是否自动增加
    bool is_auto_increment() { return false; }

    // 是否保证非空
    bool is_not_null() { return false; }

public:
    // 列名
    static const char kName[];

    // 列的类型(在schema.json文件中指定的)
    static const char kType[];

    static const char kDefault[];

private:
    SQLessTable_tb* table_;
};

// The size of the picture file
class SQLessColumn_tb_size {
public:
    SQLessColumn_tb_size(SQLessTable_tb* table);
    ~SQLessColumn_tb_size();

    // 获取所属的表
    SQLessTable_tb* table() { return table_; }

    // 该列是否存在，如果存在 real_type 代表当前数据库里的列类型
    // 注：通过kType获取到的是当前json描述文件里的类型，列的类型可能发生了变化
    bool exists();

    // 创建本列
    bool create();

    // 数据库已经为主键建了索引，并且主键是唯一的
    // 对于整数类型的主键，该列的值还会自动增长
    bool is_primary_key() { return false; }

    // 该列是否建了索引
    bool is_indexed() { return false; }

    // 该列中的值是否唯一化
    bool is_unique() { return false; }

    // 是否自动增加
    bool is_auto_increment() { return false; }

    // 是否保证非空
    bool is_not_null() { return false; }

public:
    // 列名
    static const char kName[];

    // 列的类型(在schema.json文件中指定的)
    static const char kType[];

    static const int64_t kDefault = 0;

private:
    SQLessTable_tb* table_;
};

// The MD5 checksum of the picture
class SQLessColumn_tb_md5 {
public:
    SQLessColumn_tb_md5(SQLessTable_tb* table);
    ~SQLessColumn_tb_md5();

    // 获取所属的表
    SQLessTable_tb* table() { return table_; }

    // 该列是否存在，如果存在 real_type 代表当前数据库里的列类型
    // 注：通过kType获取到的是当前json描述文件里的类型，列的类型可能发生了变化
    bool exists();

    // 创建本列
    bool create();

    // 数据库已经为主键建了索引，并且主键是唯一的
    // 对于整数类型的主键，该列的值还会自动增长
    bool is_primary_key() { return false; }

    // 该列是否建了索引
    bool is_indexed() { return false; }

    // 该列中的值是否唯一化
    bool is_unique() { return false; }

    // 是否自动增加
    bool is_auto_increment() { return false; }

    // 是否保证非空
    bool is_not_null() { return false; }

public:
    // 列名
    static const char kName[];

    // 列的类型(在schema.json文件中指定的)
    static const char kType[];

private:
    SQLessTable_tb* table_;
};

// The image file data
class SQLessColumn_tb_data {
public:
    SQLessColumn_tb_data(SQLessTable_tb* table);
    ~SQLessColumn_tb_data();

    // 获取所属的表
    SQLessTable_tb* table() { return table_; }

    // 该列是否存在，如果存在 real_type 代表当前数据库里的列类型
    // 注：通过kType获取到的是当前json描述文件里的类型，列的类型可能发生了变化
    bool exists();

    // 创建本列
    bool create();

    // 数据库已经为主键建了索引，并且主键是唯一的
    // 对于整数类型的主键，该列的值还会自动增长
    bool is_primary_key() { return false; }

    // 该列是否建了索引
    bool is_indexed() { return false; }

    // 该列中的值是否唯一化
    bool is_unique() { return false; }

    // 是否自动增加
    bool is_auto_increment() { return false; }

    // 是否保证非空
    bool is_not_null() { return false; }

public:
    // 列名
    static const char kName[];

    // 列的类型(在schema.json文件中指定的)
    static const char kType[];

private:
    SQLessTable_tb* table_;
};


} // namespace unittest

#endif
