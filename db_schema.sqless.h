// Generated by SQLess v0.1
// project homepage http://www.SQLess.org

#ifndef SQLess_28446f7d_59d6_11e4_89cc_600308a27834_H
#define SQLess_28446f7d_59d6_11e4_89cc_600308a27834_H

#include <string>
#include <vector>
        
#include <sqlite3.h>

namespace ns {
class SQLessDB_db1;
class SQLessTable_tb1;

// 数据库连接
class SQLessConn {
public:
    SQLessConn();
    ~SQLessConn();

    typedef sqlite3* Handle;

    bool connect(const std::string& path, const std::string& key = "");

    // 数据库连接是否有效
    bool isValid();

    // 事务处理
    void beginTransition();
    void endTransition();

    // 执行数据库无关的查询，如查询服务器版本
    bool execQuery(const std::string& sql_stmt, std::string* result);

    // 关闭数据库连接
    // 同时delete所有的用户数据库实例
    void close();

    Handle handle() { return handle_; }

    // 是否存在的数据库
    bool has_database_db1();
    SQLessDB_db1* database_db1();

private:
    SQLessDB_db1* database_db1_;

Handle handle_;
};

class SQLessDB_db1 {
public:
    SQLessDB_db1(SQLessConn* conn);
    ~SQLessDB_db1();

    bool exists();

    // 删除数据库
    // 将同时delete所有的数据表实例
    void drop();

    // 获取所属的数据库连接
    SQLessConn* connection() { return conn_; }

    // 直接执行SQL语句
    bool execQuery(const std::string& sql_stmt);

    // 指定数据表是否存在以及获取相应表
    bool has_table_tb1();
    SQLessTable_tb1* table_tb1();


public:
    static const char kName[];
    static const char kDescription[];

private:
    // 创建本数据库
    bool create();

    // 切换到当前数据库
    bool use();

private:
    SQLessConn* conn_;

    SQLessTable_tb1* table_tb1_;

};

class SQLessTable_tb1 {
public:
    SQLessTable_tb1(SQLessDB_db1* db);
    ~SQLessTable_tb1();

    // 当前数据表是否存在
    bool exists();

    // 删除数据表
    bool drop();

    // 获取所属的数据库
    SQLessDB_db1* database() { return db_; }

    // 包含的记录数
    int row_count();

    // 插入参数

    class InsertParam {
    public:
        InsertParam();
        ~InsertParam();

        void set_col1(int);
        void set_col2(double);
        void set_col3(const std::string&);
        void set_col4(const std::string&);

    private:
        friend class SQLessTable_tb1;
        int col1_;
        bool has_col1_;
        double col2_;
        bool has_col2_;
        std::string col3_;
        bool has_col3_;
        std::string col4_;
        bool has_col4_;

    };
        

    // 插入操作
    bool insert(const InsertParam& param);

    // 查询参数

    class SelectParam {
      public:
          SelectParam();
          ~SelectParam();

        void add_col1() { col1_ = true; }
        void add_col2() { col2_ = true; }
        void add_col3() { col3_ = true; }
        void add_col4() { col4_ = true; }


        void order_by_col1(bool desc = false);
        void order_by_col2(bool desc = false);
        void order_by_col3(bool desc = false);
        void order_by_col4(bool desc = false);


        void set_condition(const std::string& cond);
        void set_limit(int count);

      private:
        friend class SQLessTable_tb1;

        bool col1_;
        bool col2_;
        bool col3_;
        bool col4_;


        std::string condition_;
        std::string order_by_;
        bool desc_;
        int limit_count_;
    };
        

    // 查询结果

  class SelectResult {
    public:
        SelectResult();
        ~SelectResult();

        int col1() { return col1_; }
        double col2() { return col2_; }
        std::string col3() { return col3_; }
        std::string col4() { return col4_; }


        bool getRow();  // 获取下一条结果
    private:
        friend class SQLessTable_tb1;
        sqlite3_stmt* stmt_;
        SelectParam param_;

        int col1_;
        double col2_;
        std::string col3_;
        std::string col4_;

    };
        

    // 查询操作
    bool select(const SelectParam& param, SelectResult* result);

    // 更新参数

    class UpdateParam {
    public:
        UpdateParam();
        ~UpdateParam();

        void set_col1(int);
        void set_col2(double);
        void set_col3(const std::string&);
        void set_col4(const std::string&);


        void set_condition(const std::string& cond);

    private:
        friend class SQLessTable_tb1;

        std::string condition_;

        int col1_;
        bool has_col1_;
        double col2_;
        bool has_col2_;
        std::string col3_;
        bool has_col3_;
        std::string col4_;
        bool has_col4_;

    };
        

    // 更新操作
    bool update(const UpdateParam& param, int* affected_rows = NULL);

    // 删除操作
    bool remove(const std::string& condition, int* affected_rows = NULL);

    // 清空所有记录
    bool clear(int* affected_rows = NULL);

public:
    static const char kName[];
    static const char kDescription[];

private:
    // 创建数据表
    bool create();

private:
    // 所属数据库
    SQLessDB_db1* db_;
};


} // namespace ns

#endif
